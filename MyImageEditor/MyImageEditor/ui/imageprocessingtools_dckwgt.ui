<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>CImageProcessingToolsView</class>
 <widget class="QDockWidget" name="CImageProcessingToolsView">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>548</width>
    <height>301</height>
   </rect>
  </property>
  <property name="styleSheet">
   <string notr="true">QPushButton {
	color: rgb(45, 45, 45);
     border: 2px solid #8f8f91;
	 border-color: rgb(90, 93, 125);
     border-radius: 6px;
     background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                       stop: 0 #f6f7fa, stop: 1 #dadbde);
     min-width: 80px;
 }

 QPushButton:pressed {
     background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                       stop: 0 #dadbde, stop: 1 #f6f7fa);
 }

 QPushButton:hover {
     border-color: rgb(90, 93, 255);
 }

 QPushButton:default {
     border-color: navy; /* make the default button prominent */
 }

QPushButton:disabled {  
	color: rgb(171, 171, 171);
     border-color: none; /* make the default button prominent */
 }

QDockWidget::title {
	background-color: rgb(174, 174, 220);
	color: rgb(45, 45, 45);
	 border: 1px solid black;
     border-top: 3px solid qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                       stop: 0 black, stop: 1  rgb(174, 174, 220));
     border-radius: 2px;
 }

QComboBox {
     border: 1px solid gray;
     border-radius: 3px;
     padding: 1px 18px 1px 3px;
     min-width: 6em;
 }

QComboBox:editable {
     background: white;
 }

 QComboBox:!editable, QComboBox::drop-down:editable {
      background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                  stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,
                                  stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
 }

 /* QComboBox gets the &quot;on&quot; state when the popup is open */
 QComboBox:!editable:on, QComboBox::drop-down:editable:on {
     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 #D3D3D3, stop: 0.4 #D8D8D8,
                                 stop: 0.5 #DDDDDD, stop: 1.0 #E1E1E1);
 }

 QComboBox:on { /* shift the text when the popup opens */
     padding-top: 3px;
     padding-left: 4px;
 }

 QComboBox::drop-down {
     subcontrol-origin: padding;
     subcontrol-position: top right;
     width: 15px;

     border-left-width: 1px;
     border-left-color: darkgray;
     border-left-style: solid; /* just a single line */
     border-top-right-radius: 3px; /* same radius as the QComboBox */
     border-bottom-right-radius: 3px;
 }


 QComboBox::down-arrow {
    image: url(:/images/Action-arrow-down-icon.png);
 }

 QComboBox::down-arrow:on { /* shift the arrow when popup is open */
     top: 1px;
     left: 1px;
 }

QCheckBox:indicator {
	color: rgb(45, 45, 45);
     border: 0px solid #8f8f91;
	 border-color: rgb(90, 93, 125);
     border-radius: 4px;
    
	background-color: qlineargradient(spread:pad, x1:0.015, y1:0.051, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));
 }

 QCheckBox::indicator:unchecked {
     image: url(:/images/checkbox_unchecked.png);
 }

 QCheckBox::indicator:unchecked:hover {
     border: 1px solid;
     border-color: rgb(90, 93, 255);
     image: url(:/images/checkbox_unchecked_hover.png);
 }

 QCheckBox::indicator:unchecked:pressed {
     image: url(:/images/checkbox_unchecked_pressed.png);
 }

 QCheckBox::indicator:checked {
     image: url(:/images/checkbox_checked.png);
 }

 QCheckBox::indicator:checked:hover {
     border: 1px solid;
     border-color: rgb(90, 93, 255);
     image: url(:/images/checkbox_checked_hover.png);
 }

 QCheckBox::indicator:checked:pressed {
     image: url(:/images/checkbox_checked_pressed.png);
 }

 QCheckBox::indicator:indeterminate:hover {
     image: url(:/images/checkbox_indeterminate_hover.png);
 }

 QCheckBox::indicator:indeterminate:pressed {
     image: url(:/images/checkbox_indeterminate_pressed.png);
 }
</string>
  </property>
  <property name="windowTitle">
   <string>Image Processing Tools</string>
  </property>
  <widget class="QWidget" name="dockWidgetContents">
   <layout class="QGridLayout" name="gridLayout">
    <item row="4" column="0">
     <widget class="QGroupBox" name="groupBox">
      <property name="title">
       <string>Mutually Exclusive Operations</string>
      </property>
      <layout class="QVBoxLayout" name="verticalLayout">
       <item>
        <widget class="QRadioButton" name="m_none_rdBtn">
         <property name="text">
          <string>None</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QRadioButton" name="m_convertToMono_rdBtn">
         <property name="text">
          <string>Convert to Monochrome</string>
         </property>
        </widget>
       </item>
       <item>
        <layout class="QHBoxLayout" name="horizontalLayout_2">
         <item>
          <widget class="QRadioButton" name="m_detectEdges_rdBtn">
           <property name="text">
            <string>Detect Edges</string>
           </property>
          </widget>
         </item>
         <item>
          <widget class="QLabel" name="label_2">
           <property name="layoutDirection">
            <enum>Qt::LeftToRight</enum>
           </property>
           <property name="text">
            <string>Method:</string>
           </property>
           <property name="alignment">
            <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
           </property>
          </widget>
         </item>
         <item>
          <widget class="QComboBox" name="m_detectEdges_comBx"/>
         </item>
        </layout>
       </item>
       <item>
        <layout class="QHBoxLayout" name="horizontalLayout_4">
         <item>
          <widget class="QRadioButton" name="m_blurImage_rdBtn">
           <property name="text">
            <string>Blur Image</string>
           </property>
          </widget>
         </item>
         <item>
          <widget class="QLabel" name="label_3">
           <property name="text">
            <string>Method:</string>
           </property>
           <property name="alignment">
            <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
           </property>
          </widget>
         </item>
         <item>
          <widget class="QComboBox" name="m_blurImageMethod_comBx"/>
         </item>
        </layout>
       </item>
      </layout>
     </widget>
    </item>
    <item row="3" column="0">
     <layout class="QHBoxLayout" name="horizontalLayout">
      <item>
       <widget class="QCheckBox" name="m_convertToGrayScale_chkBx">
        <property name="text">
         <string>Convert to Gray Scale</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QLabel" name="label">
        <property name="text">
         <string>Method:</string>
        </property>
        <property name="alignment">
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QComboBox" name="m_grayScaleMethod_comBx"/>
      </item>
     </layout>
    </item>
    <item row="0" column="0">
     <widget class="QPushButton" name="m_genHistogram_btn">
      <property name="text">
       <string>Generate Histogram</string>
      </property>
     </widget>
    </item>
    <item row="2" column="0">
     <widget class="QCheckBox" name="m_reverseImageHor_chkBx">
      <property name="text">
       <string>Mirror Image Horizontally</string>
      </property>
     </widget>
    </item>
    <item row="1" column="0">
     <widget class="QCheckBox" name="m_reverseImageVer_chkBx">
      <property name="text">
       <string>Mirror Image Vertically</string>
      </property>
     </widget>
    </item>
   </layout>
  </widget>
 </widget>
 <resources>
  <include location="../resource/myimageeditor.qrc"/>
 </resources>
 <connections/>
</ui>
